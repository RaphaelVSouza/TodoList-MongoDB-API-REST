"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_brute_1 = __importDefault(require("express-brute"));
const express_brute_redis_1 = __importDefault(require("express-brute-redis"));
const passport_1 = __importDefault(require("passport"));
const swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
const swagger_jsdoc_1 = __importDefault(require("swagger-jsdoc"));
const multer_1 = __importDefault(require("multer"));
const UserController_1 = __importDefault(require("./app/controllers/UserController"));
const AvatarController_1 = __importDefault(require("./app/controllers/AvatarController"));
const SessionController_1 = __importDefault(require("./app/controllers/SessionController"));
const PasswordController_1 = __importDefault(require("./app/controllers/PasswordController"));
const ProjectController_1 = __importDefault(require("./app/controllers/ProjectController"));
const TaskController_1 = __importDefault(require("./app/controllers/TaskController"));
const UserMailController_1 = __importDefault(require("./app/controllers/UserMailController"));
const UserStore_1 = __importDefault(require("./app/middlewares/validators/UserStore"));
const UserUpdate_1 = __importDefault(require("./app/middlewares/validators/UserUpdate"));
const PasswordStore_1 = __importDefault(require("./app/middlewares/validators/PasswordStore"));
const PasswordUpdate_1 = __importDefault(require("./app/middlewares/validators/PasswordUpdate"));
const SessionStore_1 = __importDefault(require("./app/middlewares/validators/SessionStore"));
const ProjectStore_1 = __importDefault(require("./app/middlewares/validators/ProjectStore"));
const ProjectUpdate_1 = __importDefault(require("./app/middlewares/validators/ProjectUpdate"));
const ProjectIndex_1 = __importDefault(require("./app/middlewares/validators/ProjectIndex"));
const app_1 = __importDefault(require("./app"));
const redis_1 = __importDefault(require("./app/config/redis"));
const multer_2 = __importDefault(require("./app/config/multer"));
const docSwagger_1 = __importDefault(require("./documentation/docSwagger"));
const brute_1 = __importDefault(require("./app/config/brute"));
const error_1 = __importDefault(require("./app/middlewares/error"));
const store = new express_brute_redis_1.default(redis_1.default);
const bruteforce = new express_brute_1.default(store, { freeRetries: brute_1.default });
const specs = swagger_jsdoc_1.default(docSwagger_1.default);
app_1.default.use("/docs", swagger_ui_express_1.default.serve);
app_1.default.get("/", (req, res) => {
    res.send("API is running");
});
app_1.default.get("/docs", swagger_ui_express_1.default.setup(specs, {
    customCss: ".swagger-ui .topbar { display: none !important }",
    customSiteTitle: "TodoList | Documentation",
}));
app_1.default.post("/register", multer_1.default(multer_2.default).single("file"), UserStore_1.default, UserController_1.default.store);
app_1.default.post("/login", bruteforce.prevent, SessionStore_1.default, SessionController_1.default.store);
app_1.default.delete("/user-management/delete-photo", passport_1.default.authenticate("jwt", { session: false }), AvatarController_1.default.delete);
app_1.default.get("/verify-email/:verifyToken", UserMailController_1.default.verifyEmail);
app_1.default.post("/verify-email/re-send", UserMailController_1.default.sendVerificationMail);
app_1.default.post("/forgot-password", PasswordStore_1.default, PasswordController_1.default.store);
app_1.default.put("/reset-password/:resetToken", PasswordUpdate_1.default, PasswordController_1.default.update);
app_1.default.put("/user-management/edit-account", passport_1.default.authenticate("jwt", { session: false }), multer_1.default(multer_2.default).single("file"), UserUpdate_1.default, UserController_1.default.update);
app_1.default.delete("/user-management/delete-account", passport_1.default.authenticate("jwt", { session: false }), UserUpdate_1.default, UserController_1.default.delete);
app_1.default.post("/my-projects/create-project", ProjectStore_1.default, passport_1.default.authenticate("jwt", { session: false }), ProjectController_1.default.store);
app_1.default.get("/my-projects/all-projects", passport_1.default.authenticate("jwt", { session: false }), ProjectIndex_1.default, ProjectController_1.default.index);
app_1.default.get("/my-projects/:projectId/tasks", passport_1.default.authenticate("jwt", { session: false }), ProjectController_1.default.show);
app_1.default.put("/my-projects/:projectId/edit", ProjectUpdate_1.default, passport_1.default.authenticate("jwt", { session: false }), ProjectController_1.default.update);
app_1.default.delete("/my-projects/:projectId/delete", passport_1.default.authenticate("jwt", { session: false }), ProjectController_1.default.delete);
app_1.default.put("/task/:taskId/edit", passport_1.default.authenticate("jwt", { session: false }), TaskController_1.default.update);
app_1.default.delete("/task/:taskId/delete", passport_1.default.authenticate("jwt", { session: false }), TaskController_1.default.delete);
app_1.default.use(error_1.default);
exports.default = app_1.default;
